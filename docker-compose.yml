version: "3.8"

networks:
  proxy_network:
    external: true

  cloudflare_network:
    external: true

  pihole_network:
    external: true

services:
  cloudflared-tunnel:
    image: cloudflare/cloudflared:2022.9.1-arm64
    container_name: cloudflared-tunnel
    user: ${PUID}:${PGID}
    restart: unless-stopped
    command: tunnel --no-autoupdate run geck
    networks:
      - cloudflare_network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ${CLOUDFLARE_BASE_DIRECTORY}/config.yaml:/etc/cloudflared/config.yaml
      - ${CLOUDFLARE_BASE_DIRECTORY}/.cloudflared:/root/.cloudflared

  nginx-server:
    image: jc21/nginx-proxy-manager:2.9.18
    container_name: nginx-proxy
    restart: unless-stopped
    networks:
      - proxy_network
      - cloudflare_network
    ports:
      - 80:80
      - 443:443
      - 81:81
    volumes:
      - ${NGNIX_PROXY_MANAGER_BASE_DIRECTORY}/data:/data
      - ${NGNIX_PROXY_MANAGER_BASE_DIRECTORY}/letsencrypt:/etc/letsencrypt
    environment:
      DB_SQLITE_FILE: "/data/database.sqlite"
      DISABLE_IPV6: "true"

  homer-web:
    image: b4bz/homer:v22.08.1
    container_name: homer-web
    restart: always
    networks:
      - proxy_network
    volumes:
      - ${HOMER_BASE_DIRECTORY}/www/assets:/www/assets
    environment:
      - INIT_ASSETS=0

  homer-local-web:
    image: b4bz/homer:v22.08.1
    container_name: homer-local-web
    restart: always
    networks:
      - proxy_network
    volumes:
      - ${HOMER_LOCAL_BASE_DIRECTORY}/www/assets:/www/assets
    environment:
      - INIT_ASSETS=0

  pihole-server:
    image: pihole/pihole:2022.10
    container_name: pihole-server
    restart: unless-stopped
    hostname: geck
    networks:
      pihole_network:
        ipv4_address: 192.168.4.200
    dns:
      - 1.1.1.1
      - 1.0.0.1
    ports:
      - target: 53
        published: 53
        protocol: tcp
      - target: 53
        published: 53
        protocol: udp
      - target: 67
        published: 67
        protocol: udp
      - target: 80
        published: 80
        protocol: tcp
      - target: 443
        published: 443
        protocol: tcp
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${PIHOLE_BASE_DIRECTORY}/pihole/:/etc/pihole/
      - ${PIHOLE_BASE_DIRECTORY}/dnsmasq.d/:/etc/dnsmasq.d/
    environment:
      TZ: ${TIMEZONE}
      WEBPASSWORD: ${PIHOLE_PASSWORD}
      DNSMASQ_LISTENING: all
      FTLCONF_LOCAL_IPV4: 192.168.4.200
      PIHOLE_DNS_: "192.168.4.201#5053;no"
    depends_on:
      - cloudflared-agent
    cap_add:
      - NET_ADMIN

  cloudflared-agent:
    image: cloudflare/cloudflared:2022.9.1-arm64
    container_name: cloudflared-agent
    restart: unless-stopped
    command: proxy-dns
    networks:
      pihole_network:
        ipv4_address: 192.168.4.201
    environment:
      TUNNEL_DNS_UPSTREAM: "https://1.1.1.1/dns-query,https://1.0.0.1/dns-query,https://9.9.9.9/dns-query"
      TUNNEL_DNS_PORT: 5053
      TUNNEL_DNS_ADDRESS: "0.0.0.0"

  plex-server:
    image: linuxserver/plex:1.29.1
    container_name: plex-server
    restart: unless-stopped
    network_mode: host
    ports:
      - 32400:32400
    volumes:
      - ${PLEX_BASE_DIRECTORY}/config:/config
      - ${PLEX_BASE_DIRECTORY}/transcode:/transcode
      - ${MEDIA_BASE_DIRECTORY}:/data
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - CLAIM_TOKEN=${PLEX_CLAIM_TOKEN}

  calibre-web:
    image: lscr.io/linuxserver/calibre-web:0.6.19
    container_name: calibre-web
    restart: unless-stopped
    networks:
      - proxy_network
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - DOCKER_MODS=linuxserver/mods:universal-calibre
    volumes:
      - ${CALIBRE_WEB_BASE_DIRECTORY}/config:/config
      - ${BOOKS_DIRECTORY}:/books

  audiobookshelf-web:
    image: ghcr.io/advplyr/audiobookshelf:2.2.1
    container_name: audiobookshelf-web
    restart: unless-stopped
    networks:
      - proxy_network
    environment:
      - AUDIOBOOKSHELF_UID=${PUID}
      - AUDIOBOOKSHELF_GID=${PGID}
    volumes:
      - ${AUDIOBOOKS_DIRECTORY}:/audiobooks
      - ${PODCASTS_DIRECTORY}:/podcasts
      - ${AUDIOBOOKSHELF_BASE_DIRECTORY}/config:/config
      - ${AUDIOBOOKSHELF_BASE_DIRECTORY}/metadata:/metadata

  pi-gallery-web:
    image: bpatrik/pigallery2:1.9.3-alpine
    container_name: pi-gallery-web
    restart: always
    networks:
      - proxy_network
    environment:
      - NODE_ENV=production
    volumes:
      - ${PIGALLERY_BASE_DIRECTORY}/config:/app/data/config
      - ${PIGALLERY_BASE_DIRECTORY}/db:/app/data/db
      - ${PIGALLERY_BASE_DIRECTORY}/tmp:/app/data/tmp
      - ${PHOTOS_DIRECTORY}:/app/data/images:ro

  emulatorjs-web:
    image: lscr.io/linuxserver/emulatorjs:1.7.2
    container_name: emulatorjs-web
    restart: unless-stopped
    networks:
      - proxy_network
    volumes:
      - ${EMULATORJS_BASE_DIRECTORY}/config:/config
      - ${EMULATORJS_BASE_DIRECTORY}/data:/data
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      # - SUBFOLDER=/ #optional

  miniflux-web:
    image: miniflux/miniflux:2.0.38
    container_name: miniflux-web
    networks:
      - proxy_network
    environment:
      - DATABASE_URL=postgres://${MINIFLUX_DB_USERNAME}:${MINIFLUX_DB_PASSWORD}@miniflux-db/miniflux?sslmode=disable
      - RUN_MIGRATIONS=1
      - CREATE_ADMIN=1
      - ADMIN_USERNAME=${MINIFLUX_ADMIN_USERNAME}
      - ADMIN_PASSWORD=${MINIFLUX_ADMIN_PASSWORD}
    depends_on:
      - miniflux-db

  miniflux-db:
    image: postgres:14
    container_name: miniflux-db
    networks:
      - proxy_network
    environment:
      - POSTGRES_USER=${MINIFLUX_DB_USERNAME}
      - POSTGRES_PASSWORD=${MINIFLUX_DB_PASSWORD}
    volumes:
      - ${MINIFLUX_DB_BASE_DIRECTORY}:/var/lib/postgresql/data

  codimd-db:
    image: postgres:11.6-alpine
    container_name: codimd-db
    restart: always
    networks:
      - proxy_network
    volumes:
      - ${CODIMD_DB_BASE_DIRECTORY}/data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${CODIMD_DB_USERNAME}
      - POSTGRES_PASSWORD=${CODIMD_DB_PASSWORD}
      - POSTGRES_DB=codimd

  codimd-web:
    image: hackmdio/hackmd:2.4.2
    container_name: codimd-web
    restart: always
    networks:
      - proxy_network
    volumes:
      - ${CODIMD_BASE_DIRECTORY}/uploads:/home/hackmd/app/public/uploads
    environment:
      - CMD_DB_URL=${CODIMD_DB_URL}
      - CMD_USECDN=false
    depends_on:
      - codimd-db

  gogs-web:
    image: gogs/gogs:0.12
    container_name: gogs-web
    restart: always
    networks:
      - proxy_network
    environment:
      - RUN_CROND=true
      - DOMAIN=${SERVICE_DOMAIN}
    volumes:
      - ${GOGS_BASE_DIRECTORY}/data:/data

  podgrab-web:
    image: akhilrex/podgrab:1.0.0
    container_name: podgrab-web
    restart: unless-stopped
    networks:
      - proxy_network
    environment:
      - CHECK_FREQUENCY=240
    volumes:
      - ${PODGRAB_BASE_DIRECTORY}/config:/config
      - ${PODCASTS_DIRECTORY}:/assets

  youtube-downloader-web:
    image: alexta69/metube:2022-10-05
    container_name: youtube-downloader-web
    restart: unless-stopped
    networks:
      - proxy_network #port: 8081
    volumes:
      - ${DOWNLOADS_DIRECTORY}/youtube:/downloads
    environment:
      UID: ${PUID}
      GID: ${PGID}

  home-assistant-web:
    image: ghcr.io/home-assistant/home-assistant:2022.9
    container_name: home-assistant-web
    restart: always
    networks:
      - proxy_network
    volumes:
      - ${HOME_ASSISTANT_BASE_DIRECTORY}/config:/config
    environment:
      - TZ=${TIMEZONE}

  nodered-web:
    image: nodered/node-red:2.2.3-12
    container_name: nodered-web
    restart: unless-stopped
    networks:
      - proxy_network
    volumes:
      - ${NODERED_BASE_DIRECTORY}/data:/data
    environment:
      - TZ=${TIMEZONE}

  nanomq-server:
    image: emqx/nanomq:0.12-slim
    container_name: nanomq-server
    restart: unless-stopped
    networks:
      - proxy_network
    environment:
      - NANOMQ_BROKER_URL="nmq-tcp://0.0.0.0:1883"
