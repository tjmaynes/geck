version: "3.6"

services:
  pihole-server:
    image: pihole/pihole:2022.09.3
    container_name: pihole-server
    restart: unless-stopped
    networks:
      pihole_network:
        ipv4_address: 172.30.9.3
      macvlan_network:
        ipv4_address: 192.168.4.200
    dns:
      - 1.1.1.1
      - 1.0.0.1
    ports:
      - target: 53
        published: 53
        protocol: tcp
      - target: 53
        published: 53
        protocol: udp
      - target: 67
        published: 67
        protocol: udp
      - target: 80
        published: 80
        protocol: tcp
      - target: 443
        published: 443
        protocol: tcp
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${PIHOLE_BASE_DIRECTORY}/pihole/:/etc/pihole/
      - ${PIHOLE_BASE_DIRECTORY}/dnsmasq.d/:/etc/dnsmasq.d/
    environment:
      TZ: ${TIMEZONE}
      WEBPASSWORD: ${PIHOLE_PASSWORD}
      DNSMASQ_LISTENING: all
      FTLCONF_LOCAL_IPV4: 192.168.4.200
      PIHOLE_DNS_: "172.30.9.2#5053;no"
    depends_on:
      - cloudflared-agent
    cap_add:
      - NET_ADMIN
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=0

  cloudflared-agent:
    image: cloudflare/cloudflared:2022.9.0-arm64
    container_name: cloudflared-agent
    restart: unless-stopped
    command: proxy-dns
    networks:
      pihole_network:
        ipv4_address: 172.30.9.2
    environment:
      TUNNEL_DNS_UPSTREAM: "https://1.1.1.1/dns-query,https://1.0.0.1/dns-query,https://9.9.9.9/dns-query"
      TUNNEL_DNS_PORT: 5053
      TUNNEL_DNS_ADDRESS: "0.0.0.0"

  nginx-server:
    image: jc21/nginx-proxy-manager:2.9.18
    container_name: nginx-proxy
    restart: unless-stopped
    networks:
      macvlan_network:
        ipv4_address: 192.168.4.201
    ports:
      - 80:80
      - 443:443
      - 81:81
    volumes:
      - ${NGNIX_PROXY_MANAGER_BASE_DIRECTORY}/data:/data
      - ${NGNIX_PROXY_MANAGER_BASE_DIRECTORY}/letsencrypt:/etc/letsencrypt
    environment:
      DB_SQLITE_FILE: "/data/database.sqlite"
      DISABLE_IPV6: "true"

  tailscale-agent:
    image: tailscale/tailscale:v1.29.125
    container_name: tailscale-agent
    restart: unless-stopped
    hostname: zeus
    privileged: true
    network_mode: host
    volumes:
      - ${TAILSCALE_BASE_DIRECTORY}/var/lib:/var/lib
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    command: tailscaled

  plex-server:
    image: lscr.io/linuxserver/plex:arm64v8-1.28.2
    container_name: plex-server
    restart: unless-stopped
    network_mode: host
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - VERSION=docker
      - CLAIM_TOKEN=${PLEX_CLAIM_TOKEN}
    volumes:
      - ${PLEX_BASE_DIRECTORY}/config:/config
      - ${PLEX_BASE_DIRECTORY}/transcode:/transcode
      - ${MEDIA_BASE_DIRECTORY}:/media

  navidrome-server:
    image: deluan/navidrome:sha-e981ee2
    container_name: navidrome-server
    user: ${PUID}:${PGID}
    ports:
      - 19000:4533
    restart: unless-stopped
    environment:
      ND_SCANSCHEDULE: 1h
      ND_LOGLEVEL: info  
      ND_SESSIONTIMEOUT: 24h
    volumes:
      - ${NAVIDROME_BASE_DIRECTORY}/data:/data
      - ${MUSIC_DIRECTORY}:/music:ro

  calibre-web:
    image: lscr.io/linuxserver/calibre-web:0.6.19
    container_name: calibre-web
    restart: unless-stopped
    networks:
      - default
    ports:
      - 18083:8083
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - DOCKER_MODS=linuxserver/mods:universal-calibre
    volumes:
      - ${CALIBRE_WEB_BASE_DIRECTORY}/config:/config
      - ${BOOKS_DIRECTORY}:/books:ro

  gogs-web:
    image: gogs/gogs:0.12
    container_name: gogs-web
    restart: always
    networks:
      - default
    ports:
      - 13000:3000
      - 12222:22
    environment:
      - RUN_CROND=true
    volumes:
      - ${GOGS_BASE_DIRECTORY}/data:/data
    depends_on:
      - gogs-db

  gogs-db:
    image: postgres:14
    container_name: gogs-db
    restart: always
    networks:
      - default
    ports:
      - 15433:5432
    environment:
      - POSTGRES_USER=${GOGS_USER}
      - POSTGRES_PASSWORD=${GOGS_DB_PASSWORD}
      - POSTGRES_DB=${GOGS_DB}
    volumes:
      - ${GOGS_DB_BASE_DIRECTORY}:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${GOGS_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  homer-web:
    image: b4bz/homer:v22.08.1
    container_name: homer-web
    restart: always
    networks:
      - default
    ports:
      - 18081:8080
    volumes:
      - ${HOMER_WEB_BASE_DIRECTORY}/www/assets:/www/assets
    environment:
      - INIT_ASSETS=0

  audiobookshelf-web:
    image: ghcr.io/advplyr/audiobookshelf:2.1.4
    container_name: audiobookshelf-web
    networks:
      - default
    ports:
      - 13378:80
    environment:
      - AUDIOBOOKSHELF_UID=${PUID}
      - AUDIOBOOKSHELF_GID=${PGID}
    volumes:
      - ${AUDIOBOOKS_DIRECTORY}:/audiobooks
      - ${PODCASTS_DIRECTORY}:/podcasts
      - ${AUDIOBOOKSHELF_BASE_DIRECTORY}/config:/config
      - ${AUDIOBOOKSHELF_BASE_DIRECTORY}/metadata:/metadata

  podgrab-web:
    image: akhilrex/podgrab:1.0.0
    container_name: podgrab-web
    restart: unless-stopped
    networks:
      - default
    ports:
      - 18084:8080
    environment:
      - CHECK_FREQUENCY=240
    volumes:
      - ${PODGRAB_BASE_DIRECTORY}/config:/config
      - ${PODCASTS_DIRECTORY}:/assets

  bitwarden-server:
    image: vaultwarden/server:1.25.2-alpine
    container_name: bitwarden-server
    restart: always
    networks:
      - default
    ports:
      - 18086:80
      - 18444:443
    volumes:
      - ${BITWARDEN_BASE_DIRECTORY}/data:/data/
    environment:
      WEBSOCKET_ENABLED: "true"
      SIGNUPS_ALLOWED: "true"

  portainer-server:
    image: portainer/portainer-ce:2.15.0-alpine
    container_name: portainer-server
    restart: always
    networks:
      - default
    ports:
      - 19001:9000
    security_opt:
      - no-new-privileges:true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes

  monitoring-grafana:
    image: grafana/grafana-oss:9.1.2
    container_name: monitoring-grafana
    user: ${PUID}:${PGID}
    ports:
      - 18888:3000
    restart: unless-stopped
    volumes:
      - ${GRAFANA_BASE_DIRECTORY}/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ${GRAFANA_BASE_DIRECTORY}/var/lib/grafana:/var/lib/grafana

networks:
  default:
    driver: bridge

  macvlan_network:
    external: true

  pihole_network:
    ipam:
      config:
        - subnet: 172.30.9.0/29