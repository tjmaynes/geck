version: "2"

services:
  pihole-server:
    image: pihole/pihole:${PIHOLE_DOCKER_TAG}
    container_name: pihole-server
    restart: always
    networks:
      macvlan_network:
        ipv4_address: ${DNS_IP_ADDRESS}
    cap_add:
      - NET_ADMIN
    volumes:
      - ${PIHOLE_BASE_DIRECTORY}/pihole/:/etc/pihole/
      - ${PIHOLE_BASE_DIRECTORY}/dnsmasq.d/:/etc/dnsmasq.d/
      - /etc/localtime:/etc/localtime:ro
    dns:
      - 1.1.1.1
      - 1.0.0.1
    ports:
      - 443/tcp
      - 53/tcp
      - 53/udp
      - 67/udp
      - 80/tcp
    environment:
      DNSMASQ_LISTENING: all
      TZ: ${TIMEZONE}
      ServerIP: ${DNS_IP_ADDRESS}
      WEBPASSWORD: ${PIHOLE_PASSWORD}
      DELAY_STARTUP: 20

  nginx-server:
    image: jc21/nginx-proxy-manager:${NGINX_SERVER_DOCKER_TAG}
    container_name: nginx-proxy
    restart: unless-stopped
    networks:
      macvlan_network:
        ipv4_address: ${PROXY_IP_ADDRESS}
    ports:
      - 80:80
      - 443:443
      - 81:81
    volumes:
      - ${NGNIX_PROXY_MANAGER_BASE_DIRECTORY}/data:/data
      - ${NGNIX_PROXY_MANAGER_BASE_DIRECTORY}/letsencrypt:/etc/letsencrypt
    environment:
      DB_SQLITE_FILE: "/data/database.sqlite"
      DISABLE_IPV6: "true"

  navidrome-server:
    image: deluan/navidrome:${NAVIDROME_DOCKER_TAG}
    container_name: navidrome-server
    # user: 1000:1000 # should be owner of volumes
    ports:
      - ${NAVIDROME_PORT}:4533
    restart: unless-stopped
    environment:
      ND_SCANSCHEDULE: 1h
      ND_LOGLEVEL: info  
      ND_SESSIONTIMEOUT: 24h
    volumes:
      - ${NAVIDROME_BASE_DIRECTORY}/data:/data
      - ${MUSIC_DIRECTORY}:/music:ro

  # plex-server:
  #   image: plexinc/pms-docker:${PLEX_DOCKER_TAG}
  #   container_name: plex-server
  #   restart: unless-stopped
  #   network_mode: host
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TIMEZONE}
  #     - CLAIM_TOKEN=${PLEX_CLAIM_TOKEN}
  #   volumes:
  #     - ${PLEX_BASE_DIRECTORY}/config:/config
  #     - ${PLEX_BASE_DIRECTORY}/transcode:/transcode
  #     - ${MEDIA_DIRECTORY}:/media

  calibre-web:
    image: lscr.io/linuxserver/calibre-web:${CALIBRE_WEB_DOCKER_TAG}
    container_name: calibre-web
    restart: unless-stopped
    networks:
      - default
    ports:
      - ${CALIBRE_WEB_PORT}:8083
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - DOCKER_MODS=linuxserver/mods:universal-calibre
    volumes:
      - ${CALIBRE_WEB_BASE_DIRECTORY}/config:/config
      - ${BOOKS_DIRECTORY}:/books:ro

  gogs-web:
    image: gogs/gogs:${GOGS_DOCKER_TAG}
    container_name: gogs-web
    restart: always
    ports:
      - ${GOGS_PORT}:3000
      - ${GOGS_SSH_PORT}:22
    networks:
      - default
    environment:
      - RUN_CROND=true
    volumes:
      - ${GOGS_BASE_DIRECTORY}/data:/data
    depends_on:
      - gogs-db

  gogs-db:
    image: postgres:${GOGS_DB_DOCKER_TAG}
    container_name: gogs-db
    restart: always
    networks:
      - default
    ports:
      - ${GOGS_DB_PORT}:5432
    environment:
      - POSTGRES_USER=${GOGS_USER}
      - POSTGRES_PASSWORD=${GOGS_DB_PASSWORD}
      - POSTGRES_DB=${GOGS_DB}
    volumes:
      - ${GOGS_DB_BASE_DIRECTORY}:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${GOGS_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  home-assistant-web:
    image: ghcr.io/home-assistant/home-assistant:${HOME_ASSISTANT_DOCKER_TAG}
    container_name: home-assistant-web
    restart: always
    network_mode: host
    volumes:
      - ${HOME_ASSISTANT_BASE_DIRECTORY}/config:/config
    environment:
      - TZ=${TIMEZONE}

  node-red:
    image: nodered/node-red:${NODE_RED_DOCKER_TAG}
    container_name: node-red
    restart: unless-stopped
    environment:
      - TZ=${TIMEZONE}
    ports:
      - ${NODE_RED_PORT}:1880
    networks:
      - default
    volumes:
      - ${NODE_RED_BASE_DIRECTORY}/data:/data

  homer-remote-web:
    image: b4bz/homer:${HOMER_DOCKER_TAG}
    container_name: homer-remote-web
    restart: always
    networks:
      - default
    ports:
      - ${HOMER_REMOTE_WEB_PORT}:8080
    volumes:
      - ${HOMER_REMOTE_WEB_BASE_DIRECTORY}/www/assets:/www/assets
    environment:
      - INIT_ASSETS=0

  homer-local-web:
    image: b4bz/homer:${HOMER_DOCKER_TAG}
    container_name: homer-local-web
    restart: always
    networks:
      - default
    ports:
      - ${HOMER_LOCAL_WEB_PORT}:8080
    volumes:
      - ${HOMER_LOCAL_WEB_BASE_DIRECTORY}/www/assets:/www/assets
    environment:
      - INIT_ASSETS=0

  audiobookshelf-web:
    image: ghcr.io/advplyr/audiobookshelf:${AUDIOBOOKSHELF_DOCKER_TAG}
    container_name: audiobookshelf-web
    networks:
      - default
    ports:
      - ${AUDIOBOOKSHELF_PORT}:80
    environment:
      - AUDIOBOOKSHELF_UID=${PUID}
      - AUDIOBOOKSHELF_GID=${PGID}
    volumes:
      - ${AUDIOBOOKS_DIRECTORY}:/audiobooks
      - ${PODCASTS_DIRECTORY}:/podcasts
      - ${AUDIOBOOKSHELF_BASE_DIRECTORY}/config:/config
      - ${AUDIOBOOKSHELF_BASE_DIRECTORY}/metadata:/metadata

  podgrab-web:
    image: akhilrex/podgrab:${PODGRAB_DOCKER_TAG}
    container_name: podgrab-web
    environment:
      - CHECK_FREQUENCY=240
    volumes:
      - ${PODGRAB_BASE_DIRECTORY}/config:/config
      - ${PODCASTS_DIRECTORY}:/assets
    ports:
      - ${PODGRAB_PORT}:8080
    restart: unless-stopped

  photoviewer-server:
    image: viktorstrate/photoview:${PHOTOVIEWER_DOCKER_TAG}
    container_name: photoviewer-server
    restart: always
    ports:
      - ${PHOTOVIEWER_PORT}:80
    depends_on:
      - photoview-db
    volumes:
      - ${PHOTOS_DIRECTORY}:/photos:ro
      - ${PHOTOVIEWER_BASE_DIRECTORY}/cache:/app/cache
    environment:
      - PHOTOVIEWER_DATABASE_DRIVER=postgres
      - PHOTOVIEWER_POSTGRES_URL=postgresql://${PHOTOVIEWER_DB_USER}:${PHOTOVIEWER_DB_PASSWORD}@photoviewer-db/${PHOTOVIEWER_DB_NAME}
      - PHOTOVIEWER_LISTEN_IP=photoviewer-server
      - PHOTOVIEWER_LISTEN_PORT=80
      - PHOTOVIEWER_MEDIA_CACHE=/app/cache

  photoviewer-db:
    image: postgres:${PHOTOVIEWER_DB_DOCKER_TAG}
    container_name: photoviewer-db
    restart: always
    networks:
      - default
    ports:
      - ${PHOTOVIEWER_DB_PORT}:5432
    environment:
      - POSTGRES_USER=${PHOTOVIEWER_DB_USER}
      - POSTGRES_PASSWORD=${PHOTOVIEWER_DB_PASSWORD}
      - POSTGRES_DB=${PHOTOVIEWER_DB_NAME}
    volumes:
      - ${PHOTOVIEWER_DB_BASE_DIRECTORY}:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PHOTOVIEWER_DB_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  photouploader-server:
    image: filebrowser/filebrowser:${PHOTOUPLOADER_DOCKER_TAG}
    container_name: photouploader-server
    restart: unless-stopped
    networks:
      - default
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
    volumes:
      - ${PHOTOS_DIRECTORY}:/photos
      - ${PHOTOUPLOADER_BASE_DIRECTORY}/database/filebrowser.db:/database/filebrowser.db
      - ${PHOTOUPLOADER_BASE_DIRECTORY}/config:/config
    ports:
      - ${PHOTOUPLOADER_PORT}:80

  drawio-web:
    image: jgraph/drawio:${DRAWIO_DOCKER_TAG}
    container_name: drawio-web
    restart: unless-stopped
    ports:
      - ${DRAWIO_PORT}:8080
      - ${DRAWIO_HTTPS_PORT}:8443
    environment:
      ORGANISATION_UNIT: unit
      ORGANISATION: bewoogie
      CITY: Remote
      STATE: Remote

  bitwarden-server:
    image: vaultwarden/server:${BITWARDEN_DOCKER_TAG}
    container_name: bitwarden-server
    restart: always
    networks:
      - default
    ports:
      - ${BITWARDEN_PORT}:80
      - ${BITWARDEN_HTTPS_PORT}:443
    volumes:
      - ${BITWARDEN_BASE_DIRECTORY}/data:/data/
    environment:
      WEBSOCKET_ENABLED: "true"
      SIGNUPS_ALLOWED: "true"

networks:
  default:
    driver: bridge

  macvlan_network:
    driver: macvlan
    driver_opts:
      parent: ovs_eth0
    ipam:
      config:
        - subnet: ${SUBNET_IP_ADDRESS}/22
          gateway: ${GATEWAY_IP_ADDRESS}
          ip_range: ${DNS_IP_ADDRESS}/32
          aux_addresses:
            host: ${HOST_IP_ADDRESS}