version: "3.8"

services:
  cloudflared-tunnel:
    image: cloudflare/cloudflared:2022.9.0-arm64
    container_name: cloudflared-tunnel
    restart: unless-stopped
    command: tunnel run
    network_mode: host
    volumes:
      - ${CLOUDFLARE_BASE_DIRECTORY}:/etc/cloudflared
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}

  nginx-server:
    image: jc21/nginx-proxy-manager:2.9.18
    container_name: nginx-proxy
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
      - 81:81
    volumes:
      - ${NGNIX_PROXY_MANAGER_BASE_DIRECTORY}/data:/data
      - ${NGNIX_PROXY_MANAGER_BASE_DIRECTORY}/letsencrypt:/etc/letsencrypt
    environment:
      DB_SQLITE_FILE: "/data/database.sqlite"
      DISABLE_IPV6: "true"

  homer-web:
    image: b4bz/homer:v22.08.1
    container_name: homer-web
    restart: always
    networks:
      - default
    ports:
      - 18081:8080
    volumes:
      - ${HOMER_BASE_DIRECTORY}/www/assets:/www/assets
    environment:
      - INIT_ASSETS=0

  jellyfin-server:
    image: linuxserver/jellyfin:10.8.4
    container_name: jellyfin-server
    restart: unless-stopped
    network_mode: host
    volumes:
      - ${JELLYFIN_BASE_DIRECTORY}/config:/config
      - ${MEDIA_BASE_DIRECTORY}:/media
    environment:
      - TZ=${TIMEZONE}
      - PUID=${PUID}
      - PGID=${PGID}
      - JELLYFIN_PublishedServerUrl=${HOST_IP}

  calibre-web:
    image: lscr.io/linuxserver/calibre-web:0.6.19
    container_name: calibre-web
    restart: unless-stopped
    networks:
      - default
    ports:
      - 18083:8083
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TIMEZONE}
      - DOCKER_MODS=linuxserver/mods:universal-calibre
    volumes:
      - ${CALIBRE_WEB_BASE_DIRECTORY}/config:/config
      - ${BOOKS_DIRECTORY}:/books:ro

  audiobookshelf-web:
    image: ghcr.io/advplyr/audiobookshelf:2.1.5
    container_name: audiobookshelf-web
    networks:
      - default
    ports:
      - 13378:80
    environment:
      - AUDIOBOOKSHELF_UID=${PUID}
      - AUDIOBOOKSHELF_GID=${PGID}
    volumes:
      - ${AUDIOBOOKS_DIRECTORY}:/audiobooks
      - ${PODCASTS_DIRECTORY}:/podcasts
      - ${AUDIOBOOKSHELF_BASE_DIRECTORY}/config:/config
      - ${AUDIOBOOKSHELF_BASE_DIRECTORY}/metadata:/metadata

  miniflux-web:
    image: miniflux/miniflux:2.0.38
    container_name: miniflux-web
    ports:
      - 18050:8080
    environment:
      - DATABASE_URL=postgres://${MINIFLUX_DB_USERNAME}:${MINIFLUX_DB_PASSWORD}@miniflux-db/miniflux?sslmode=disable
      - RUN_MIGRATIONS=1
      - CREATE_ADMIN=1
      - ADMIN_USERNAME=${MINIFLUX_ADMIN_USERNAME}
      - ADMIN_PASSWORD=${MINIFLUX_ADMIN_PASSWORD}
    depends_on:
      - miniflux-db
  
  miniflux-db:
    image: postgres:14
    container_name: miniflux-db
    ports:
      - 15434:5432
    environment:
      - POSTGRES_USER=${MINIFLUX_DB_USERNAME}
      - POSTGRES_PASSWORD=${MINIFLUX_DB_PASSWORD}
    volumes:
      - ${MINIFLUX_DB_BASE_DIRECTORY}:/var/lib/postgresql/data

  gogs-web:
    image: gogs/gogs:0.12
    container_name: gogs-web
    restart: always
    networks:
      - default
    ports:
      - 13000:3000
      - 12222:22
    environment:
      - RUN_CROND=true
    volumes:
      - ${GOGS_BASE_DIRECTORY}/data:/data
    depends_on:
      - gogs-db

  gogs-db:
    image: postgres:14
    container_name: gogs-db
    restart: always
    networks:
      - default
    ports:
      - 15433:5432
    environment:
      - POSTGRES_USER=${GOGS_USER}
      - POSTGRES_PASSWORD=${GOGS_DB_PASSWORD}
      - POSTGRES_DB=${GOGS_DB}
    volumes:
      - ${GOGS_DB_BASE_DIRECTORY}:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${GOGS_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  podgrab-web:
    image: akhilrex/podgrab:1.0.0
    container_name: podgrab-web
    restart: unless-stopped
    networks:
      - default
    ports:
      - 18084:8080
    environment:
      - CHECK_FREQUENCY=240
    volumes:
      - ${PODGRAB_BASE_DIRECTORY}/config:/config
      - ${PODCASTS_DIRECTORY}:/assets

  bitwarden-server:
    image: vaultwarden/server:1.25.2-alpine
    container_name: bitwarden-server
    restart: always
    networks:
      - default
    ports:
      - 18086:80
      - 18444:443
    volumes:
      - ${BITWARDEN_BASE_DIRECTORY}/data:/data/
    environment:
      WEBSOCKET_ENABLED: "true"
      SIGNUPS_ALLOWED: "false"

  home-assistant-web:
    image: ghcr.io/home-assistant/home-assistant:2022.9
    container_name: home-assistant-web
    restart: always
    network_mode: host
    volumes:
      - ${HOME_ASSISTANT_BASE_DIRECTORY}/config:/config
    environment:
      - TZ=${TIMEZONE}

  node-red:
    image: nodered/node-red:2.2.3-12
    container_name: node-red
    restart: unless-stopped
    environment:
      - TZ=${TIMEZONE}
    ports:
      - 18800:1880
    networks:
      - default
    volumes:
      - ${NODERED_BASE_DIRECTORY}/data:/data

  portainer-server:
    image: portainer/portainer-ce:2.15.0-alpine
    container_name: portainer-server
    restart: always
    networks:
      - default
    ports:
      - 19001:9000
    security_opt:
      - no-new-privileges:true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes

  grafana-agent:
    image: grafana/agent:main
    container_name: grafana-agent
    restart: unless-stopped
    user: ${PUID}:${PGID}
    hostname: geck
    networks:
      - default
    ports:
      - 12345:12345
    volumes:
      - ${GRAFANA_AGENT_BASE_DIRECTORY}/data:/etc/agent/data
      - ${GRAFANA_AGENT_BASE_DIRECTORY}/agent.yaml:/etc/agent/agent.yaml

  promtail-agent:
    image: grafana/promtail:main
    container_name: promtail-agent
    user: ${PUID}:${PGID}
    hostname: geck
    networks:
      - default
    volumes:
      - /var/log:/var/log
      - /var/lib/docker/:/var/lib/docker:ro
      - ${PROMTAIL_AGENT_BASE_DIRECTORY}/config.yaml:/etc/promtail/config.yaml
    command: -config.file=/etc/promtail/config.yaml

networks:
  default:
    driver: bridge